# -*- coding: utf-8 -*-
"""Proyecto_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1950HaSDbQaMxaDBwGvoEzryxvzDld6-F

# Proyecto final
Juan Sebastián Ruiz Caro
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
# %matplotlib inline
plt.rcParams['figure.figsize'] = (16,9)
plt.style.use('fast')

from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten
from sklearn.preprocessing import MinMaxScaler

from datetime import date, time, datetime
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/Casos_Bogota.csv', sep=','  , engine='python', parse_dates=True)

data.head()

data.columns

data_1 = data[data['Nombre departamento'] == 'BOGOTA']

"""## Análisis exploratorio de datos"""

Datos = data_1.filter(['Edad', 'Sexo','Tipo de contagio', 'Ubicación del caso', 'Estado'])

"""### Edad
En promedio, los contagiados en la ciudad de Bogota tiene una edad de $38.57$ años. El individuo contagiado con menos edad tuvo un año, en contra posición, la persona con mas edad que contrago el virus tiene $114$ años. Ademas, la distribución de las edades presenta asimetria positiva, es decir, es mas frecuente encontrar dentro de los contagiados personas con edades entre los $20$ y $40$ años.
"""

pd.DataFrame(Datos['Edad'].describe().round(2))

sns.distplot(Datos['Edad'])

"""### Sexo
En cuanto al sexo de los contagiados en la ciudad de Bogotá, observamos que se presenta de manera similar tanto en el sexo masculino como femenino, aunque levemente se presenta un poco mas en el sexo femenino con un $53.454$% de los casos.
"""

pd.DataFrame(round(100*Datos['Sexo'].value_counts()/Datos['Sexo'].value_counts().sum(),3))

plt.bar(['Femenino', 'Masculino'], [427154 + 3 , 377545 + 2], color = ['orange','green'])
plt.title('Sexo de los contagiados en la ciudad de Bogotá')
plt.xlabel('Sexo')
plt.ylabel('Frecuencia')
plt.show()

"""### Tipo de contagio

El tipo de contagio mas frecuente dentro de los contagiados es en estudio con un $48.47$%, lo que quiere decir que en una parte importante, se desconoce el tipo de contagio de los que contraen el virus, seguido de relacionado con un $36.14$%, unicamente el $0.06$% de los casos son importados.
"""

Datos['Tipo de contagio'].value_counts()

round(100*Datos['Tipo de contagio'].value_counts()/Datos['Tipo de contagio'].value_counts().sum(),2)

plt.bar(['Relacionado', 'En estudio', 'Comunitaria', 'Importado '], [306639, 273307, 223819,939 ])
plt.title('Tipo de contagio en la ciudad de Bogotá')
plt.xlabel('Tipo de contagio')
plt.ylabel('Frecuencia')
plt.show()

"""### Ubicación del caso

De los casos registrados, el $98.08$% se encuentran en su casa, $1.9$% fallecieron, unicamente el $0.01$% se encuentra en UCI.

"""

pd.DataFrame(round(100*Datos['Ubicación del caso'].value_counts()/Datos['Ubicación del caso'].value_counts().sum(),2))

Datos['Ubicación del caso'].value_counts()

Datos['Ubicación del caso'].value_counts()

plt.bar(['Casa', 'Fallecido', 'Hospital', 'Hospital UCI' ], [1427285+558,27718,111,93])
plt.title('Ubicación del caso la ciudad de Bogotá')
plt.xlabel('Ubicación del caso')
plt.ylabel('Frecuencia')
plt.show()

Casos = data_1['fecha reporte web']

Casos = Casos.str[:-7]

Casos = pd.DataFrame(Casos) 
Casos = pd.DataFrame(Casos.value_counts()) ; Casos

Casos = Casos.rename_axis(['0']).reset_index() ; Casos

Casos.columns = ['Fecha', 'f']

Casos['Fecha'] = Casos['Fecha'].replace(['1', '2', '3', '4', '5', '6', '7', '8', '9'],['01', '02', '03', '04', '05', '06', '07', '08', '09']) ; Casos

Fecha_1 = Casos['Fecha'].str.split('/', expand = True)
Fecha_1.columns = ['Dia', 'Mes', 'Año'] ; Fecha_1

Fecha_1['Mes'] = Fecha_1['Mes'].replace(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'])
Fecha_1['Dia'] = Fecha_1['Dia'].replace(['1', '2', '3', '4', '5', '6', '7', '8', '9'],['01', '02', '03', '04', '05', '06', '07', '08', '09'])

Fecha_1

Fecha_1['Fecha final'] = Fecha_1['Mes'] + "/" + Fecha_1['Dia'] + '/' + Fecha_1['Año'] ; Fecha_1

Serie_tiempo = pd.concat([Casos,Fecha_1['Fecha final']], axis=1) ; Serie_tiempo

Serie_tiempo

Serie_tiempo['Fecha final'] = pd.to_datetime(Serie_tiempo['Fecha final']) ; Serie_tiempo
Serie_tiempo = Serie_tiempo.drop(['Fecha'], axis = 1)
Serie_tiempo = Serie_tiempo.sort_values(by = 'Fecha final')

Serie_tiempo.columns = ['Casos', 'Fecha']

df = Serie_tiempo

df['Fecha'] = pd.to_datetime(df['Fecha'])

df.columns

Serie_tiempo.set_index('Fecha', inplace=True)

df

Serie_tiempo.plot(kind = 'line', figsize= (14,10))

# df['Fecha'] = pd.to_datetime(df['Fecha'])

print(df.index.min())
print(df.index.max())

df.describe()

df.plot()

"""## Aprendizaje profundo"""

PASOS = 9
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
    n_vars = 1 if type(data) is list else data.shape[1]
    df = pd.DataFrame(data)
    cols, names = list(), list()
    for i in range(n_in, 0, -1):
        cols.append(df.shift(i))
        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
    for i in range(0, n_out):
        cols.append(df.shift(-i))
        if i == 0:
            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
        else:
            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
    agg = pd.concat(cols, axis=1)
    agg.columns = names
    if dropnan:
        agg.dropna(inplace=True)
    return agg
 
values = df.values
values = values.astype('float32')
scaler = MinMaxScaler(feature_range=(-1, 1))
values=values.reshape(-1, 1) 
scaled = scaler.fit_transform(values)
reframed = series_to_supervised(scaled, PASOS, 1)
reframed.head()

values = reframed.values
n_train_days = 105 - (30 + PASOS)
train = values[:n_train_days, :]
test = values[n_train_days:, :]
x_train, y_train = train[:, :-1], train[:, -1]
x_val, y_val = test[:, :-1], test[:, -1]
x_train = x_train.reshape((x_train.shape[0], 1, x_train.shape[1]))
x_val = x_val.reshape((x_val.shape[0], 1, x_val.shape[1]))
print(x_train.shape, y_train.shape, x_val.shape, y_val.shape)

def crear_modeloFF():
    model = Sequential() 
    model.add(Dense(PASOS, input_shape=(1,PASOS),activation='tanh'))
    model.add(Flatten())
    model.add(Dense(1, activation='tanh'))
    model.compile(loss='mean_absolute_error',optimizer='Adam',metrics=["mse"])
    model.summary()
    return model

EPOCHS = 200

model = crear_modeloFF()

history=model.fit(x_train,y_train,epochs=EPOCHS,validation_data=(x_val,y_val),batch_size=PASOS)

results = model.predict(x_val)
plt.plot(range(len(y_val)),y_val,c='g',label='real')
plt.plot(range(len(results)),results,c='r',label='modelo')
plt.title('validate')
plt.legend(loc='best')